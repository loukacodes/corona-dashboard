{"version":3,"sources":["client/charts/country-specific-line-chart/LineChartContainer.module.scss","client/hooks/useInterval.ts","client/helpers/lightenColor.ts","client/hooks/useResizeObserver.ts","client/charts/corona-bar-chart/CoronaBarChart.tsx","client/common/Button.tsx","client/charts/corona-bar-chart/CoronaBarChartContainer.tsx","client/charts/country-specific-line-chart/LineChart.tsx","client/charts/country-specific-line-chart/LineChartContainer.tsx","client/common/Card.tsx","client/navbar/Navbar.tsx","client/sidebar/Sidebar.tsx","client/app/App.tsx","index.tsx","client/charts/corona-bar-chart/CoronaBarChartContainer.module.scss","client/common/Button.module.scss","client/common/Card.module.scss","client/navbar/Navbar.module.scss","client/sidebar/Sidebar.module.scss","client/app/App.module.scss"],"names":["module","exports","useInterval","callback","delay","useEffect","id","setInterval","clearInterval","lightenColor","color","percent","R","parseInt","substring","G","B","toFixed","toString","length","useResizeObserver","ref","useState","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","textColor","CoronaBarChart","data","currentMonth","svgRef","useRef","wrapperRef","updatedData","Array","from","map","d","i","sort","a","b","casePerDay","svg","select","undefined","yScale","scaleBand","paddingInner","domain","index","range","height","xScale","scaleLinear","max","c","width","append","attr","selectAll","transition","duration","call","axisBottom","bars","country","join","enter","bandwidth","exit","remove","labels","text","style","className","Button","children","onClick","extraClassName","styles","root","getRandomIncrement","num","Math","floor","random","CoronaBarChartContainer","iteration","setIteration","start","setStart","mockCoronaData","setData","header","body","footer","LineChart","scaleTime","Date","Confirmed","confirmedLine","line","x","y","curve","curveBasis","deathLine","Deaths","recoveredLine","Recovered","axisLeft","confirmedPaths","merge","deathPaths","recoveredPaths","LineChartContainer","SupportedCountries","Vietnam","selectedCountry","setSelectedCountry","storageID","loadData","useCallback","fetch","response","json","rawData","localStorage","setItem","JSON","stringify","storedData","getItem","parse","handleSelectCountry","CountrySelection","radioButtonGroup","Object","values","isSelected","selected","slider","Card","Navbar","Sidebar","App","content","row","racingBarChart","somethingMore","lineChart","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff9bb697.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LineChartContainer_root__3hZNA\",\"body\":\"LineChartContainer_body__ZwVu-\",\"radioButtonGroup\":\"LineChartContainer_radioButtonGroup__1f1vO\",\"country\":\"LineChartContainer_country__6ERJ-\",\"slider\":\"LineChartContainer_slider__1YRgK\",\"vietnam\":\"LineChartContainer_vietnam__1br1G\",\"japan\":\"LineChartContainer_japan__1dNqN\",\"spain\":\"LineChartContainer_spain__2GueI\"};","import { useEffect } from \"react\"\n\nfunction useInterval(callback: () => void, delay: number) {\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      return callback()\n    }\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n  }, [callback, delay])\n}\n\nexport default useInterval","const lightenColor = (color: string, percent: number) => {\n  var R = parseInt(color.substring(1, 3), 16)\n  var G = parseInt(color.substring(3, 5), 16)\n  var B = parseInt(color.substring(5, 7), 16)\n\n  R = parseInt(((R * (100 + percent)) / 100).toFixed(0))\n  G = parseInt(((G * (100 + percent)) / 100).toFixed(0))\n  B = parseInt(((B * (100 + percent)) / 100).toFixed(0))\n\n  R = R < 255 ? R : 255\n  G = G < 255 ? G : 255\n  B = B < 255 ? B : 255\n\n  var RR = R.toString(16).length === 1 ? '0' + R.toString(16) : R.toString(16)\n  var GG = G.toString(16).length === 1 ? '0' + G.toString(16) : G.toString(16)\n  var BB = B.toString(16).length === 1 ? '0' + B.toString(16) : B.toString(16)\n\n  return '#' + RR + GG + BB\n}\n\nexport default lightenColor\n","import React, { useEffect, useState } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nconst useResizeObserver = (ref: React.MutableRefObject<Element>) => {\n  const [dimensions, setDimensions] = useState<DOMRectReadOnly>()\n  useEffect(() => {\n    const observeTarget = ref.current\n    const resizeObserver = new ResizeObserver(\n      (entries: ResizeObserverEntry[]) => {\n        entries.forEach((entry) => {\n          setDimensions(entry.contentRect as DOMRectReadOnly) \n        })\n      }\n    )\n    resizeObserver.observe(observeTarget)\n    return () => {\n      resizeObserver.unobserve(observeTarget)\n    }\n  }, [ref])\n  return dimensions\n}\n\nexport default useResizeObserver\n","import { axisBottom, axisLeft, max, scaleBand, scaleLinear, select } from 'd3'\nimport React, { useEffect, useRef } from 'react'\nimport lightenColor from '../../helpers/lightenColor'\nimport useResizeObserver from '../../hooks/useResizeObserver'\nimport { CoronaCase } from '../../model/corona-case'\n\ninterface Props {\n  data: CoronaCase[]\n  currentMonth: string\n}\n\nconst baseBarColor = '#1c3d56'\nconst textColor = '#e5ffdeff'\n\nconst CoronaBarChart: React.FC<Props> = ({ data, currentMonth }) => {\n  const svgRef = useRef('')\n  const wrapperRef = useRef()\n  const dimensions = useResizeObserver(wrapperRef as any)\n\n  const updatedData = Array.from(data)\n    .map((d, i) => {\n      return {\n        ...d,\n        color: lightenColor(baseBarColor, i * 10),\n      }\n    })\n    .sort((a, b) => b.casePerDay - a.casePerDay)\n\n  useEffect(() => {\n    const svg = select(svgRef.current) as any\n    if (dimensions === undefined) return\n\n    const yScale = scaleBand()\n      .paddingInner(0.1)\n      .domain(updatedData.map((d) => d.index))\n      .range([0, dimensions.height])\n\n    const xScale = scaleLinear()\n      .domain([0, max(updatedData as Iterable<any>, (c) => c.casePerDay)])\n      .range([0, dimensions.width])\n\n    // plot the axes\n    svg\n      .append('g')\n      .attr('transform', `translate(0, ${dimensions.height})`)\n      .attr('class', 'xAxis')\n\n    svg.selectAll('.xAxis').transition().duration(100).call(axisBottom(xScale))\n\n    // plot the bars\n    const bars = svg.selectAll('.bar')\n    bars\n      .data(updatedData, (d: CoronaCase) => d.country)\n      .join((enter: any) =>\n        enter.append('rect').attr('y', (d: CoronaCase) => yScale(d.index))\n      )\n      .attr('fill', (d: CoronaCase) => d.color)\n      .attr('class', 'bar')\n      .attr('x', 0)\n      .attr('height', yScale.bandwidth)\n      .transition()\n      .duration(200)\n      .attr('width', (d: CoronaCase) => xScale(d.casePerDay))\n      .attr('y', (d: CoronaCase) => yScale(d.index))\n    bars.exit().remove()\n\n    // plot the labels\n    const labels = svg.selectAll('.label')\n    labels\n      .data(updatedData, (d: CoronaCase) => d.country)\n      .join((enter: any) =>\n        enter\n          .append('text')\n          .attr(\n            'y',\n            (d: CoronaCase) =>\n              (yScale(d.index) || 0) + yScale.bandwidth() / 2 + 5\n          )\n      )\n      .text((d: CoronaCase) => ` ${d.country} (${d.casePerDay} cases)`)\n      .attr('class', 'label')\n      .style('fill', textColor)\n      .attr('x', 10)\n      .transition()\n      .duration(200)\n      .attr(\n        'y',\n        (d: CoronaCase) => (yScale(d.index) || 0) + yScale.bandwidth() / 2 + 5\n      )\n    labels.exit().remove()\n\n    // plot current month\n    svg\n      .select('.currentMonth')\n      .attr('x', dimensions.width - 200)\n      .attr('y', dimensions.height)\n      .text(currentMonth)\n      .style('fill', textColor)\n      .style('font-size', '28px')\n  }, [currentMonth, updatedData, dimensions])\n\n  return (\n    <div ref={wrapperRef as any}>\n      <svg ref={svgRef as any}>\n        <text className=\"currentMonth\"></text>\n      </svg>\n    </div>\n  )\n}\n\nexport default CoronaBarChart\n","import React, { ReactNode } from 'react'\nimport styles from './Button.module.scss'\n\ninterface ButtonProps {\n  children: ReactNode\n  onClick: () => void\n  extraClassName?: string\n}\nconst Button: React.FC<ButtonProps> = ({ children, onClick, extraClassName }) => {\n  return (\n    <button className={`${styles.root} ${extraClassName}`} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import React, { useState } from 'react'\nimport useInterval from '../../hooks/useInterval'\nimport { CoronaCase } from '../../model/corona-case'\nimport styles from './CoronaBarChartContainer.module.scss'\nimport CoronaBarChart from './CoronaBarChart'\nimport mockCoronaData from './mockCoronaData.json'\nimport Button from '../../common/Button'\n\nconst getRandomIncrement = (num: number) => {\n  return Math.floor(num * Math.random())\n}\n\nconst DAYS_IN_YEAR = 365\n\nfunction CoronaBarChartContainer() {\n  const [iteration, setIteration] = useState(0)\n  const [start, setStart] = useState(false)\n  const [data, setData] = useState<CoronaCase[]>(mockCoronaData)\n\n  const updateData = () => {\n    if (start && iteration < DAYS_IN_YEAR) {\n      setData(\n        data.map((entry, index) => {\n          if (\n            index === getRandomIncrement(data.length) &&\n            iteration % 10 === 0\n          ) {\n            return {\n              ...entry,\n              casePerDay: entry.casePerDay + getRandomIncrement(500),\n            }\n          }\n          return {\n            ...entry,\n            casePerDay: entry.casePerDay + getRandomIncrement(10),\n          }\n        })\n      )\n      setIteration(iteration + 1)\n    }\n  }\n\n  useInterval(updateData, 100)\n\n  const currentMonth = () => {\n    switch (true) {\n      case iteration < 30:\n        return 'April - 2020'\n      case iteration > 30 && iteration <= 60:\n        return 'May - 2020'\n      case iteration >= 60 && iteration <= 90:\n        return 'June - 2020'\n      case iteration >= 90 && iteration <= 120:\n        return 'July - 2020'\n      case iteration >= 120 && iteration <= 150:\n        return 'August - 2020'\n      case iteration >= 150 && iteration <= 180:\n        return 'September - 2020'\n      case iteration >= 180 && iteration <= 210:\n        return 'October - 2020'\n      case iteration >= 210 && iteration <= 240:\n        return 'November - 2020'\n      case iteration >= 240 && iteration <= 270:\n        return 'December - 2020'\n      case iteration >= 270 && iteration <= 300:\n        return 'January - 2021'\n      case iteration >= 300 && iteration <= 330:\n        return 'February - 2021'\n      case iteration >= 330 && iteration <= 360:\n        return 'March - 2021'\n      default:\n        return ''\n    }\n  }\n\n  const handleReset = () => {\n    setData(mockCoronaData)\n    setIteration(0)\n    setStart(false)\n  }\n\n  const toggleStart = () => {\n    setStart(!start)\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <h3>Corona cases per day during one year since outbreak</h3>\n      </div>\n      <div className={styles.body}>\n        <CoronaBarChart data={data} currentMonth={currentMonth()} />\n      </div>\n      <div className={styles.footer}>\n        <Button onClick={toggleStart}>\n          {start ? 'Stop' : 'Start observing'}\n        </Button>\n        <Button onClick={handleReset}>Reset</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default CoronaBarChartContainer\n","import {\n  axisBottom,\n  axisLeft,\n  curveBasis,\n  line,\n  max,\n  scaleLinear,\n} from 'd3'\nimport { scaleTime } from 'd3-scale'\nimport { select } from 'd3-selection'\nimport React, { useEffect, useRef } from 'react'\nimport useResizeObserver from '../../hooks/useResizeObserver'\nimport { SingleCountryData } from './corona-country'\n\ninterface LineChartProps {\n  data: SingleCountryData[]\n}\n\nconst LineChart: React.FC<LineChartProps> = ({ data }) => {\n  \n  const svgRef = useRef('')\n  const wrapperRef = useRef()\n  const dimensions = useResizeObserver(wrapperRef as any)\n\n  useEffect(() => {\n    if (!dimensions) return\n\n    const svg = select(svgRef.current) as any\n\n    const xScale = scaleTime()\n      .domain([new Date(data[0].Date), new Date(data[data.length - 1].Date)])\n      .range([0, dimensions.width])\n\n    const yScale = scaleLinear()\n      .domain([0, max(data as Iterable<any>, (d) => d.Confirmed)])\n      .range([dimensions.height, 0])\n\n    const confirmedLine = line()\n      .x((d: any) => xScale(new Date(d.Date)))\n      .y((d: any) => yScale(d.Confirmed))\n      .curve(curveBasis)\n\n    const deathLine = line()\n      .x((d: any) => xScale(new Date(d.Date)))\n      .y((d: any) => yScale(d.Deaths))\n      .curve(curveBasis)\n\n    const recoveredLine = line()\n      .x((d: any) => xScale(new Date(d.Date)))\n      .y((d: any) => yScale(d.Recovered))\n      .curve(curveBasis)\n\n    // plot the axes\n    svg\n      .append('g')\n      .attr('transform', 'translate(0,' + dimensions.height + ')')\n      .attr('class', 'xAxis')\n\n    svg.selectAll('.xAxis').transition().duration(100).call(axisBottom(xScale))\n\n    svg.append('g').attr('class', 'yAxis')\n    svg.selectAll('.yAxis').transition().duration(100).call(axisLeft(yScale)) // Create an axis component with axisLeft\n\n    const confirmedPaths = svg.selectAll('.confirmedLine').data([data], (d: SingleCountryData) => d.Confirmed)\n\n    confirmedPaths\n      .enter()\n      .append('path')\n      .attr('class', 'confirmedLine')\n      .merge(confirmedPaths)\n      .transition()\n      .duration(300)\n      .attr('d', confirmedLine)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 3)\n\n    const deathPaths = svg.selectAll('.deathLine').data([data], (d: SingleCountryData) => d.Deaths)\n\n    deathPaths\n      .enter()\n      .append('path')\n      .attr('class', 'deathLine')\n      .merge(deathPaths)\n      .transition()\n      .duration(300)\n      .attr('d', deathLine)\n      .attr('fill', 'none')\n      .attr('stroke', 'red')\n      .attr('stroke-width', 3)\n\n\n    const recoveredPaths = svg.selectAll('.recoveredLine').data([data], (d: SingleCountryData) => d.Recovered)\n\n    recoveredPaths\n      .enter()\n      .append('path')\n      .attr('class', 'recoveredLine')\n      .merge(recoveredPaths)\n      .transition()\n      .duration(300)\n      .attr('d', recoveredLine)\n      .attr('fill', 'none')\n      .attr('stroke', 'green')\n      .attr('stroke-width', 3)\n\n  }, [data, dimensions])\n\n  return (\n    <div ref={wrapperRef as any} id='lineChart'>\n      <svg ref={svgRef as any}></svg>\n    </div>\n  )\n}\n\nexport default LineChart\n","import { style } from 'd3-selection'\nimport React, { ChangeEvent, useEffect, useState } from 'react'\nimport { useCallback } from 'react'\nimport Button from '../../common/Button'\nimport { SingleCountryData } from './corona-country'\nimport LineChart from './LineChart'\nimport styles from './LineChartContainer.module.scss'\n\nconst LineChartContainer: React.FC = () => {\n  enum SupportedCountries {\n    Vietnam = 'vietnam',\n    Japan = 'japan',\n    Spain = 'spain',\n  }\n  const [data, setData] = useState<SingleCountryData[] | null>(null)\n  const [selectedCountry, setSelectedCountry] = useState<SupportedCountries>(\n    SupportedCountries.Vietnam\n  )\n  const storageID = `country-specific-${selectedCountry}`\n\n  const loadData = useCallback(async () => {\n    const response = await fetch(\n      `https://api.covid19api.com/dayone/country/${selectedCountry}`,\n      {}\n    )\n    const rawData = (await response.json()) as SingleCountryData[]\n    setData(rawData)\n    localStorage.setItem(storageID, JSON.stringify(rawData))\n  }, [selectedCountry, storageID])\n\n  useEffect(() => {\n    const storedData = localStorage.getItem(storageID)\n    if (storedData !== null) {\n      setData(JSON.parse(storedData))\n    }\n    loadData()\n  }, [loadData, selectedCountry, storageID])\n\n  const handleSelectCountry = async (country: SupportedCountries) => {\n    setSelectedCountry(country)\n    await loadData()\n  }\n\n  const CountrySelection = () => {\n    return (\n      <div className={styles.radioButtonGroup}>\n        {Object.values(SupportedCountries).map((country) => {\n          const isSelected = country === selectedCountry\n          return (\n            <Button\n              extraClassName={`${styles.country} ${\n                isSelected ? styles.selected : ''\n              }`}\n              onClick={() => handleSelectCountry(country)}\n              key={country}\n            >\n              {country}\n            </Button>\n          )\n        })}\n        <div className={`${styles.slider} ${styles[selectedCountry]}`}></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.root}>\n      <h3>Country specific line chart</h3>\n      <CountrySelection />\n      <div className={styles.body}>{data && <LineChart data={data} />}</div>\n    </div>\n  )\n}\n\nexport default LineChartContainer\n","import React, { ReactNode } from 'react'\nimport styles from './Card.module.scss'\n\ninterface CardProps {\n  children: ReactNode\n  extraClassName?: string\n}\n\nconst Card: React.FC<CardProps> = ({ children, extraClassName }) => {\n  return <div className={`${styles.root} ${extraClassName}`}>{children}</div>\n}\n\nexport default Card\n","import React from 'react'\nimport styles from './Navbar.module.scss'\n\nconst Navbar = () => {\n  return <nav className={styles.root}>dashboard</nav>\n}\n\nexport default Navbar\n","import React from 'react'\nimport styles from './Sidebar.module.scss'\n\nconst Sidebar = () => {\n  return <div className={styles.root}>\n    SIDEBAR\n  </div>\n}\n\nexport default Sidebar","import React from 'react'\nimport CoronaBarChartContainer from '../charts/corona-bar-chart/CoronaBarChartContainer'\nimport LineChartContainer from '../charts/country-specific-line-chart/LineChartContainer'\nimport Card from '../common/Card'\nimport Navbar from '../navbar/Navbar'\nimport Sidebar from '../sidebar/Sidebar'\nimport styles from './App.module.scss'\n\nfunction App() {\n  return (\n    <div className={styles.root}>\n      <Navbar />\n      <div className={styles.body}>\n        <Sidebar />\n        <div className={styles.content}>\n          <div className={styles.row}>\n            <Card extraClassName={styles.racingBarChart}>\n              <CoronaBarChartContainer />\n            </Card>\n            <Card>Under construction</Card>\n            <Card>Under construction</Card>\n            <Card extraClassName={styles.somethingMore}>Under construction</Card>\n          </div>\n          <div className={styles.row}>\n            <Card>Under construction</Card>\n            <Card extraClassName={styles.lineChart}>\n              <LineChartContainer />\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './client/app/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CoronaBarChartContainer_root__1woAm\",\"body\":\"CoronaBarChartContainer_body__1fOOk\",\"footer\":\"CoronaBarChartContainer_footer__1tTnW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Button_root__2P1AG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Card_root__28PKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2yqQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sidebar_root__3WpJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2V7rr\",\"body\":\"App_body__2Ub_L\",\"content\":\"App_content__xxQ-O\",\"row\":\"App_row__3HoDQ\",\"racingBarChart\":\"App_racingBarChart__1teDS\",\"somethingMore\":\"App_somethingMore__14QNf\",\"lineChart\":\"App_lineChart__1kpcv\"};"],"sourceRoot":""}